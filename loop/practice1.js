//1. 사용자가 입력한 정수까지의 범위 중 짝수만 추출해서 한 줄로 출력해야 함.

// 사용자로부터 양의 정수 하나를 입력받는다 (문자열을 숫자로 변환)
let number = +prompt(`양의 정수 하나를 입력하세요!`);

// 출력할 숫자들을 담을 문자열 변수 초기화
let numList = '';

// 2부터 입력한 수까지 반복하면서
for (let i = 2; i <= number ; i++) {
    // 현재 숫자가 짝수라면
    if (i % 2 === 0) {
        // 문자열에 해당 숫자 추가 (공백 포함)
        numList += `${i} `;
    }
}
// 결과를 alert 창으로 출력
alert(numList);

console.log(`===============================`)

// 2. 입력한 수 이하의 2의 거듭제곱 수들을 출력하고, 그 개수도 함께 보여줘야 함.

// 사용자로부터 양의 정수를 입력받는다
let number = +prompt(`양의 정수를 입력하세요!`);

// 출력용 문자열
let numList = '';
// 출력된 숫자의 개수를 저장할 변수
let numCnt = 0;

// 2부터 입력한 수까지, 2의 거듭제곱 단위로 반복
for (let i = 2; i <= number; i *= 2) {
    // 현재 숫자 추가
    numList += `${i} `;
    // 개수도 1 증가
    numCnt++;
}

// 결과와 개수를 출력
alert(`${numList} \n총 개수: ${numCnt}`);

console.log(`===============================`)

// 3. 입력한 수 이하의 3의 거듭제곱 수만 출력해야 함. 개수나 합계는 요구되지 않음.

// 사용자로부터 양의 정수를 입력받는다
let putNum = +prompt(`양의 정수를 입력하세요!`);

// 출력할 문자열 변수
let numList = '';

// 3부터 입력값 이하까지, 3의 거듭제곱 단위로 반복
for (let i = 3; i <= putNum; i *= 3) {
    // 문자열에 숫자 추가
    numList += `${i} `;
}
// 결과 출력
alert(numList);

console.log(`===================================`)

// 4.  입력값보다 누적합이 커지지 않도록 2의 거듭제곱을 순차적으로 더해가며 출력해야 함.
// 최종적으로는 출력값과 함께 누적합을 같이 출력해야 함.

// 사용자로부터 양의 정수를 입력받는다
let putNum = +prompt(`양의 정수를 입력하세요!`);

// 출력할 숫자들 저장할 문자열
let numList = '';
// 누적합을 표시할 변수
let numListSum = 0;
// 조건 판단용 누적합 변수
let numSum = 0;

// 2부터 시작해서 2의 거듭제곱으로 증가하면서 반복
for (let i = 2; i < putNum ; i *= 2) {
    // 현재 값 i를 더했을 때 총합이 입력값 이하일 경우에만 추가
    if (numSum + i <= putNum) {
        numList += `${i} `;     // 출력 문자열에 추가
        numListSum += i;        // 누적합 계산
    }
}
// 결과 출력 (숫자 목록 + 누적합)
alert(`${numList} \n누적합: ${numListSum}`);
